@model LavaderoMotos.Models.Venta
@{
    ViewData["Title"] = "Crear Venta";
}

<div class="container mt-4">
    <!-- Mensajes de alerta -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show mx-auto" style="max-width: 800px;" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mx-auto" style="max-width: 800px;" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <h2>Crear Venta</h2>

    <form asp-action="Create" method="post" id="ventaForm">
        @Html.AntiForgeryToken()

        <div class="row">
            <div class="col-md-4">
                <div class="mb-3">
                    <label asp-for="Placa" class="form-label"></label>
                    <input asp-for="Placa" class="form-control" id="placaInput" />
                    <span asp-validation-for="Placa" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-4">
                <div class="mb-3">
                    <label asp-for="Kilometraje" class="form-label"></label>
                    <input asp-for="Kilometraje" class="form-control" />
                    <span asp-validation-for="Kilometraje" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-4">
                <div class="mb-3">
                    <label asp-for="Fecha" class="form-label">Fecha de Venta</label>
                    <input asp-for="Fecha" type="datetime-local" class="form-control"
                        value="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
                    <span asp-validation-for="Fecha" class="text-danger"></span>
                    <small class="text-muted">Deje en blanco para usar fecha y hora actual</small>
                </div>
            </div>
        </div>

        <hr />
        <h4>Productos</h4>
        <div id="productosContainer">
            <!-- Producto inicial -->
            <div class="producto-item mb-3 border p-3 rounded">
                <div class="row">
                    <div class="col-md-4">
                        <label class="form-label">Producto</label>
                        <input name="Productos[0].Producto" class="form-control producto-input" required />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Productos[0].Producto"
                            data-valmsg-replace="true"></span>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Cantidad</label>
                        <input name="Productos[0].Cantidad" type="number" min="1" value="1"
                            class="form-control cantidad-input" required />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Productos[0].Cantidad"
                            data-valmsg-replace="true"></span>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Precio Unitario</label>
                        <input name="Productos[0].Precio" type="number" step="0.01" class="form-control precio-input"
                            required />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Productos[0].Precio"
                            data-valmsg-replace="true"></span>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Total</label>
                        <input type="text" class="form-control total-producto" readonly />
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="button" class="btn btn-danger btn-sm" onclick="eliminarProducto(this)">
                            <i class="bi bi-trash"></i> Eliminar
                        </button>
                    </div>
                </div>
                <input type="hidden" name="Productos[0].Id" value="0" />
            </div>
        </div>

        <button type="button" class="btn btn-outline-primary mb-3" onclick="agregarProducto()">
            <i class="bi bi-plus-circle"></i> Agregar Producto
        </button>

        <div class="card mt-3">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label asp-for="Descuento" class="form-label">Descuento (%)</label>
                            <input asp-for="Descuento" type="number" min="0" max="100" step="1" class="form-control"
                                id="descuentoInput" value="0" />
                            <span asp-validation-for="Descuento" class="text-danger"></span>
                            <small class="text-muted">Ingrese un valor entre 0 y 100</small>
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="text-end">
                            <h5>Subtotal: <span id="subtotalVenta">0</span></h5>
                            <h5>Descuento: <span id="descuentoAplicado">0</span> (<span
                                    id="porcentajeDescuento">0</span>%)</h5>
                            <h4>Total Venta: <span id="totalVenta">0</span></h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-3">
            <button type="submit" class="btn btn-success">
                <i class="bi bi-save"></i> Guardar Venta
            </button>
            <a asp-action="Index" class="btn btn-secondary">
                <i class="bi bi-arrow-left"></i> Cancelar
            </a>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        let productoIndex = 0;
        const formatoMoneda = new Intl.NumberFormat('es-CO', {
            style: 'decimal',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        });

        function agregarProducto() {
            const container = document.getElementById("productosContainer");
            const divProducto = document.createElement("div");
            divProducto.className = "producto-item mb-3 border p-3 rounded";
            divProducto.innerHTML = `
                    <div class="row">
                        <div class="col-md-4">
                            <label class="form-label">Producto</label>
                            <input name="Productos[${productoIndex}].Producto" class="form-control producto-input" required />
                            <span class="text-danger field-validation-valid" data-valmsg-for="Productos[${productoIndex}].Producto" data-valmsg-replace="true"></span>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Cantidad</label>
                            <input name="Productos[${productoIndex}].Cantidad" type="number" min="1" value="1" class="form-control cantidad-input" required />
                            <span class="text-danger field-validation-valid" data-valmsg-for="Productos[${productoIndex}].Cantidad" data-valmsg-replace="true"></span>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Precio Unitario</label>
                            <input name="Productos[${productoIndex}].Precio" type="number" step="0.01" class="form-control precio-input" required />
                            <span class="text-danger field-validation-valid" data-valmsg-for="Productos[${productoIndex}].Precio" data-valmsg-replace="true"></span>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Total</label>
                            <input type="text" class="form-control total-producto" readonly />
                        </div>
                        <div class="col-md-2 d-flex align-items-end">
                            <button type="button" class="btn btn-danger btn-sm" onclick="eliminarProducto(this)">
                                <i class="bi bi-trash"></i> Eliminar
                            </button>
                        </div>
                    </div>
                    <input type="hidden" name="Productos[${productoIndex}].Id" value="0" />
                `;
            container.appendChild(divProducto);

            // Configurar eventos
            const precioInput = divProducto.querySelector('.precio-input');
            const cantidadInput = divProducto.querySelector('.cantidad-input');
            const totalInput = divProducto.querySelector('.total-producto');

            const calcularTotalProducto = () => {
                const cantidad = parseFloat(cantidadInput.value) || 0;
                const precio = parseFloat(precioInput.value) || 0;
                totalInput.value = formatoMoneda.format(cantidad * precio);
                actualizarTotalVenta();
            };

            precioInput.addEventListener('input', calcularTotalProducto);
            cantidadInput.addEventListener('input', calcularTotalProducto);

            // Inicializar validaci√≥n
            $.validator.unobtrusive.parse(divProducto);
            productoIndex++;
        }

        function eliminarProducto(button) {
            const productoItem = button.closest('.producto-item');
            productoItem.remove();

            // Reindexar todos los productos
            const container = document.getElementById("productosContainer");
            const items = container.querySelectorAll('.producto-item');

            items.forEach((item, index) => {
                item.querySelectorAll('[name^="Productos["]').forEach(input => {
                    const name = input.name.replace(/Productos\[\d+\]/, `Productos[${index}]`);
                    input.name = name;
                });
            });

            actualizarTotalVenta();
            productoIndex = items.length;
        }

        function actualizarTotalVenta() {
            let subtotal = 0;

            // Calcular subtotal sumando todos los productos
            document.querySelectorAll('.producto-item').forEach(item => {
                const cantidad = parseFloat(item.querySelector('.cantidad-input').value) || 0;
                const precio = parseFloat(item.querySelector('.precio-input').value) || 0;
                subtotal += cantidad * precio;
            });

            const descuento = parseFloat(document.getElementById('descuentoInput').value) || 0;
            const descuentoMonetario = subtotal * (descuento / 100);
            const total = subtotal - descuentoMonetario;

            // Actualizar los valores en pantalla
            document.getElementById('subtotalVenta').textContent = formatoMoneda.format(subtotal);
            document.getElementById('descuentoAplicado').textContent = formatoMoneda.format(descuentoMonetario);
            document.getElementById('porcentajeDescuento').textContent = descuento;
            document.getElementById('totalVenta').textContent = formatoMoneda.format(total);
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Verificar si ya hay productos (en caso de error de validaci√≥n)
            const container = document.getElementById("productosContainer");
            if (container.children.length === 0) {
                agregarProducto();
            } else {
                // Si hay productos, configurar eventos y calcular totales
                document.querySelectorAll('.producto-item').forEach(item => {
                    const precioInput = item.querySelector('.precio-input');
                    const cantidadInput = item.querySelector('.cantidad-input');
                    const totalInput = item.querySelector('.total-producto');

                    const calcularTotalProducto = () => {
                        const cantidad = parseFloat(cantidadInput.value) || 0;
                        const precio = parseFloat(precioInput.value) || 0;
                        totalInput.value = formatoMoneda.format(cantidad * precio);
                        actualizarTotalVenta();
                    };

                    precioInput.addEventListener('input', calcularTotalProducto);
                    cantidadInput.addEventListener('input', calcularTotalProducto);

                    // Calcular valor inicial
                    calcularTotalProducto();
                });
            }

            // Convertir placa a may√∫sculas
            document.getElementById('placaInput').addEventListener('input', function () {
                this.value = this.value.toUpperCase();
            });

            // Actualizar total cuando cambia el descuento
            document.getElementById('descuentoInput').addEventListener('input', actualizarTotalVenta);
        });
    </script>

    <style>
        .producto-item {
            background-color: #f8f9fa;
        }

        .total-producto {
            font-weight: bold;
            background-color: #e9ecef;
        }

        #totalVenta {
            font-weight: bold;
            color: #0d6efd;
            font-size: 1.2rem;
        }
    </style>
}

<!-- Bootstrap Icons -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">