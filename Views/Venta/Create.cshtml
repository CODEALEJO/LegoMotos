
@using System.Globalization
@model LavaderoMotos.Models.Venta

@{
    ViewData["Title"] = "Crear Nueva Venta";
}

<div class="container mt-4">
    <h2>@ViewData["Title"]</h2>
    <hr />

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }

    <form asp-action="Create" id="ventaForm">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label asp-for="Placa" class="control-label"></label>
                    <input asp-for="Placa" class="form-control" />
                    <span asp-validation-for="Placa" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label asp-for="Kilometraje" class="control-label"></label>
                    <input asp-for="Kilometraje" class="form-control" />
                    <span asp-validation-for="Kilometraje" class="text-danger"></span>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label asp-for="Fecha" class="control-label"></label>
                    <input asp-for="Fecha" class="form-control" type="datetime-local" />
                    <span asp-validation-for="Fecha" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label asp-for="Descuento" class="control-label"></label>
                    <input asp-for="Descuento" class="form-control" type="text" inputmode="decimal" />
                    <span asp-validation-for="Descuento" class="text-danger"></span>
                </div>
            </div>
        </div>

        <h4 class="mt-4">Productos</h4>
        <div id="productosContainer">
            @if (Model.Productos != null && Model.Productos.Count > 0)
            {
                for (int i = 0; i < Model.Productos.Count; i++)
                {
                    <div class="producto-item row mb-3">
                        <div class="col-md-4">
                            <label class="control-label">Producto</label>
                            <input name="Productos[@i].Producto" class="form-control producto-autocomplete" value="@Model.Productos[i].Producto" />
                            <span class="text-danger"></span>
                        </div>
                        <div class="col-md-2">
                            <label class="control-label">Cantidad</label>
                            <input name="Productos[@i].Cantidad" type="number" class="form-control cantidad" value="@Model.Productos[i].Cantidad" min="1" />
                            <span class="text-danger"></span>
                        </div>
                        <div class="col-md-3">
                            <label class="control-label">Precio Unitario</label>
                            <input name="Productos[@i].Precio" class="form-control precio" type="text" inputmode="decimal" value="@Model.Productos[i].Precio.ToString(CultureInfo.InvariantCulture)" />
                            <span class="text-danger"></span>
                        </div>
                        <div class="col-md-2">
                            <label class="control-label">Subtotal</label>
                            <input class="form-control subtotal" readonly />
                        </div>
                        <div class="col-md-1 d-flex align-items-end">
                            <button type="button" class="btn btn-danger btn-remove-producto">Eliminar</button>
                        </div>
                    </div>
                }
            }
        </div>

        <div class="form-group mt-3">
            <button type="button" id="btnAddProducto" class="btn btn-secondary">Agregar Producto</button>
        </div>

        <div class="row mt-4">
            <div class="col-md-6">
                <div class="form-group">
                    <input type="submit" value="Guardar Venta" class="btn btn-primary" />
                    <a asp-action="Index" class="btn btn-secondary">Cancelar</a>
                </div>
            </div>
            <div class="col-md-6 text-right">
                <h4>Total: <span id="totalVenta">0.00</span></h4>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        $(document).ready(function() {
            // Contador para nuevos productos
            let productoIndex = @(Model.Productos?.Count ?? 0);
            
            // Agregar nuevo producto
            $('#btnAddProducto').click(function() {
                const newProductoHtml = `
                    <div class="producto-item row mb-3">
                        <div class="col-md-4">
                            <label class="control-label">Producto</label>
                            <input name="Productos[${productoIndex}].Producto" class="form-control producto-autocomplete" />
                            <span class="text-danger"></span>
                        </div>
                        <div class="col-md-2">
                            <label class="control-label">Cantidad</label>
                            <input name="Productos[${productoIndex}].Cantidad" type="number" class="form-control cantidad" value="1" min="1" />
                            <span class="text-danger"></span>
                        </div>
                        <div class="col-md-3">
                            <label class="control-label">Precio Unitario</label>
                            <input name="Productos[${productoIndex}].Precio" class="form-control precio" type="text" inputmode="decimal" />
                            <span class="text-danger"></span>
                        </div>
                        <div class="col-md-2">
                            <label class="control-label">Subtotal</label>
                            <input class="form-control subtotal" readonly />
                        </div>
                        <div class="col-md-1 d-flex align-items-end">
                            <button type="button" class="btn btn-danger btn-remove-producto">Eliminar</button>
                        </div>
                    </div>
                `;
                
                $('#productosContainer').append(newProductoHtml);
                productoIndex++;
                
                // Inicializar autocomplete para el nuevo campo
                initAutocomplete($('#productosContainer .producto-autocomplete').last());
                
                // Recalcular total
                calcularTotal();
            });
            
            // Eliminar producto
            $(document).on('click', '.btn-remove-producto', function() {
                $(this).closest('.producto-item').remove();
                recalcularIndices();
                calcularTotal();
            });
            
            // Calcular subtotal y total cuando cambian cantidades o precios
            $(document).on('input', '.cantidad, .precio', function() {
                const productoItem = $(this).closest('.producto-item');
                const cantidad = parseFloat(productoItem.find('.cantidad').val()) || 0;
                const precioInput = productoItem.find('.precio');
                
                // Manejar el valor del precio como texto y convertirlo correctamente
                const precioStr = precioInput.val().replace(',', '.');
                const precio = parseFloat(precioStr) || 0;
                
                const subtotal = cantidad * precio;
                
                productoItem.find('.subtotal').val(subtotal.toFixed(2));
                calcularTotal();
            });
            
            // Función para calcular el total
            function calcularTotal() {
                let total = 0;
                
                $('.producto-item').each(function() {
                    const subtotal = parseFloat($(this).find('.subtotal').val()) || 0;
                    total += subtotal;
                });
                
                // Aplicar descuento si existe
                const descuentoStr = $('#Descuento').val().replace(',', '.');
                const descuento = parseFloat(descuentoStr) || 0;
                total -= descuento;
                
                $('#totalVenta').text(total.toFixed(2));
            }
            
            // Recalcular índices después de eliminar un producto
            function recalcularIndices() {
                productoIndex = 0;
                $('.producto-item').each(function(index) {
                    $(this).find('input').each(function() {
                        const name = $(this).attr('name');
                        if (name) {
                            $(this).attr('name', name.replace(/\[\d+\]/, `[${index}]`));
                        }
                    });
                    productoIndex++;
                });
            }
            
            // Autocomplete para productos
            function initAutocomplete(element) {
                element.autocomplete({
                    source: function(request, response) {
                        $.getJSON('@Url.Action("BuscarProductos", "Producto")', { term: request.term }, function(data) {
                            response(data);
                        });
                    },
                    minLength: 2,
                    select: function(event, ui) {
                        // Cuando se selecciona un producto, podemos cargar su precio
                        const productoItem = $(this).closest('.producto-item');
                        productoItem.find('.precio').val(ui.item.precio.toString().replace(',', '.'));
                        
                        // Disparar evento para calcular subtotal
                        productoItem.find('.precio').trigger('input');
                    }
                });
            }
            
            // Inicializar autocomplete para productos existentes
            $('.producto-autocomplete').each(function() {
                initAutocomplete($(this));
            });
            
            // Calcular total inicial
            calcularTotal();
            
            // Validar formulario antes de enviar
            $('#ventaForm').submit(function(e) {
                if ($('.producto-item').length === 0) {
                    e.preventDefault();
                    alert('Debe agregar al menos un producto');
                    return false;
                }
                
                // Asegurar que todos los precios tengan formato correcto
                $('.precio').each(function() {
                    const valueStr = $(this).val().replace(',', '.');
                    const value = parseFloat(valueStr);
                    if (!isNaN(value)) {
                        $(this).val(valueStr);
                    }
                });
                
                return true;
            });
        });
    </script>
}