@using System.Globalization
@model LavaderoMotos.Models.Venta

@{
    ViewData["Title"] = "Crear Nueva Venta";
}

<div class="container mt-4">
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mx-auto" style="max-width: 800px;" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <h2>@ViewData["Title"]</h2>

    <form asp-action="Create" method="post" id="ventaForm">
        @Html.AntiForgeryToken()
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="row">
            <div class="col-md-4">
                <div class="mb-3">
                    <label asp-for="Placa" class="form-label"></label>
                    <input asp-for="Placa" class="form-control" id="placaInput" />
                    <span asp-validation-for="Placa" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-4">
                <div class="mb-3">
                    <label asp-for="Kilometraje" class="form-label"></label>
                    <input asp-for="Kilometraje" class="form-control" />
                    <span asp-validation-for="Kilometraje" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-4">
                <div class="mb-3">
                    <label asp-for="Fecha" class="form-label">Fecha de Venta</label>
                    <input asp-for="Fecha" type="datetime-local" class="form-control" />
                    <span asp-validation-for="Fecha" class="text-danger"></span>
                </div>
            </div>
        </div>

        <hr />
        <h4>Productos</h4>
        <div id="productosContainer">
            @if (Model.Productos != null && Model.Productos.Count > 0)
            {
                for (int i = 0; i < Model.Productos.Count; i++)
                {
                    <div class="producto-item mb-3 border p-3 rounded">
                        <div class="row">
                            <div class="col-md-4">
                                <label class="form-label">Producto</label>
                                <input asp-for="Productos[i].Producto" class="form-control producto-autocomplete" required />
                                <span asp-validation-for="Productos[i].Producto" class="text-danger"></span>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Cantidad</label>
                                <input asp-for="Productos[i].Cantidad" type="number" min="1" 
                                       class="form-control cantidad" required />
                                <span asp-validation-for="Productos[i].Cantidad" class="text-danger"></span>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Precio Unitario</label>
                                <input asp-for="Productos[i].Precio" type="text" inputmode="decimal" 
                                       class="form-control precio" required />
                                <span asp-validation-for="Productos[i].Precio" class="text-danger"></span>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Subtotal</label>
                                <input class="form-control subtotal" readonly />
                            </div>
                            <div class="col-md-1 d-flex align-items-end">
                                <button type="button" class="btn btn-danger btn-sm btn-remove-producto">
                                    <i class="bi bi-trash"></i> Eliminar
                                </button>
                            </div>
                        </div>
                    </div>
                }
            }
        </div>

        <button type="button" id="btnAddProducto" class="btn btn-outline-primary mb-3">
            <i class="bi bi-plus-circle"></i> Agregar Producto
        </button>

        <div class="card mt-3">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label asp-for="Descuento" class="form-label">Descuento (%)</label>
                            <input asp-for="Descuento" type="number" min="0" max="100" step="1" 
                                   class="form-control" id="descuentoInput" />
                            <span asp-validation-for="Descuento" class="text-danger"></span>
                        </div>
                    </div>
                    <div class="col-md-8">
                        <div class="text-end">
                            <h5>Subtotal: <span id="subtotalVenta">0.00</span></h5>
                            <h5>Descuento: <span id="descuentoAplicado">0.00</span> (<span id="porcentajeDescuento">0</span>%)</h5>
                            <h4>Total Venta: <span id="totalVenta">0.00</span></h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-3">
            <button type="submit" class="btn btn-success">
                <i class="bi bi-save"></i> Guardar Venta
            </button>
            <a asp-action="Index" class="btn btn-secondary">
                <i class="bi bi-arrow-left"></i> Cancelar
            </a>
        </div>
    </form>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        $(document).ready(function() {
            // Contador para nuevos productos
            let productoIndex = @(Model.Productos?.Count ?? 0);
            
            // Formateador de moneda
            const formatoMoneda = new Intl.NumberFormat('es-CO', {
                style: 'decimal',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            });
            
            // Convertir a mayúsculas la placa
            $('#placaInput').on('input', function() {
                this.value = this.value.toUpperCase();
            });
            
            // Agregar nuevo producto
            $('#btnAddProducto').click(function() {
                const newProductoHtml = `
                    <div class="producto-item mb-3 border p-3 rounded">
                        <div class="row">
                            <div class="col-md-4">
                                <label class="form-label">Producto</label>
                                <input name="Productos[${productoIndex}].Producto" class="form-control producto-autocomplete" required />
                                <span class="text-danger field-validation-valid" data-valmsg-for="Productos[${productoIndex}].Producto" data-valmsg-replace="true"></span>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Cantidad</label>
                                <input name="Productos[${productoIndex}].Cantidad" type="number" min="1" value="1" class="form-control cantidad" required />
                                <span class="text-danger field-validation-valid" data-valmsg-for="Productos[${productoIndex}].Cantidad" data-valmsg-replace="true"></span>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Precio Unitario</label>
                                <input name="Productos[${productoIndex}].Precio" class="form-control precio" type="text" inputmode="decimal" required />
                                <span class="text-danger field-validation-valid" data-valmsg-for="Productos[${productoIndex}].Precio" data-valmsg-replace="true"></span>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Subtotal</label>
                                <input class="form-control subtotal" readonly />
                            </div>
                            <div class="col-md-1 d-flex align-items-end">
                                <button type="button" class="btn btn-danger btn-sm btn-remove-producto">
                                    <i class="bi bi-trash"></i> Eliminar
                                </button>
                            </div>
                        </div>
                    </div>
                `;
                
                $('#productosContainer').append(newProductoHtml);
                productoIndex++;
                
                // Inicializar autocomplete para el nuevo campo
                initAutocomplete($('#productosContainer .producto-autocomplete').last());
                
                // Recalcular total
                calcularTotal();
                
                // Aplicar validación unobtrusive
                $.validator.unobtrusive.parse(newProductoHtml);
            });
            
            // Eliminar producto
            $(document).on('click', '.btn-remove-producto', function() {
                $(this).closest('.producto-item').remove();
                recalcularIndices();
                calcularTotal();
            });
            
            // Calcular subtotal y total cuando cambian cantidades o precios
            $(document).on('input', '.cantidad, .precio', function() {
                const productoItem = $(this).closest('.producto-item');
                const cantidad = parseFloat(productoItem.find('.cantidad').val()) || 0;
                const precioInput = productoItem.find('.precio');
                
                // Manejar el valor del precio como texto y convertirlo correctamente
                const precioStr = precioInput.val().replace(/\./g, '').replace(',', '.');
                const precio = parseFloat(precioStr) || 0;
                
                const subtotal = cantidad * precio;
                
                productoItem.find('.subtotal').val(formatoMoneda.format(subtotal));
                calcularTotal();
            });
            
            // Función para calcular el total
            function calcularTotal() {
                let subtotal = 0;
                
                $('.producto-item').each(function() {
                    const subtotalStr = $(this).find('.subtotal').val().replace(/\./g, '');
                    const subtotalValue = parseFloat(subtotalStr) || 0;
                    subtotal += subtotalValue;
                });
                
                // Aplicar descuento si existe
                const porcentajeDescuento = parseFloat($('#descuentoInput').val()) || 0;
                const descuento = (subtotal * porcentajeDescuento) / 100;
                const total = subtotal - descuento;
                
                $('#subtotalVenta').text(formatoMoneda.format(subtotal));
                $('#descuentoAplicado').text(formatoMoneda.format(descuento));
                $('#porcentajeDescuento').text(porcentajeDescuento);
                $('#totalVenta').text(formatoMoneda.format(total));
            }
            
            // Recalcular índices después de eliminar un producto
            function recalcularIndices() {
                productoIndex = 0;
                $('.producto-item').each(function(index) {
                    $(this).find('input').each(function() {
                        const name = $(this).attr('name');
                        if (name) {
                            $(this).attr('name', name.replace(/\[\d+\]/, `[${index}]`));
                        }
                    });
                    productoIndex++;
                });
            }
            
            // Autocomplete para productos
            function initAutocomplete(element) {
                element.autocomplete({
                    source: function(request, response) {
                        $.ajax({
                            url: '@Url.Action("BuscarProductos", "Producto")',
                            type: 'GET',
                            dataType: 'json',
                            data: { term: request.term },
                            success: function(data) {
                                response($.map(data, function(item) {
                                    return {
                                        label: item.nombre + " (Disponibles: " + item.cantidad + ")",
                                        value: item.nombre,
                                        precio: item.precioVenta,
                                        cantidadDisponible: item.cantidad
                                    };
                                }));
                            }
                        });
                    },
                    minLength: 2,
                    select: function(event, ui) {
                        // Cuando se selecciona un producto, cargar su precio
                        const productoItem = $(this).closest('.producto-item');
                        productoItem.find('.precio').val(ui.item.precio.toString().replace('.', ','));
                        
                        // Establecer la cantidad máxima disponible
                        const cantidadInput = productoItem.find('.cantidad');
                        cantidadInput.attr('max', ui.item.cantidadDisponible);
                        
                        // Disparar evento para calcular subtotal
                        productoItem.find('.precio').trigger('input');
                    },
                    focus: function(event, ui) {
                        // Mostrar el nombre del producto al enfocar
                        $(this).val(ui.item.value);
                        return false;
                    }
                }).autocomplete("instance")._renderItem = function(ul, item) {
                    return $("<li>")
                        .append(`<div>${item.label} - $${formatoMoneda.format(item.precio)}</div>`)
                        .appendTo(ul);
                };
            }
            
            // Inicializar autocomplete para productos existentes
            $('.producto-autocomplete').each(function() {
                initAutocomplete($(this));
            });
            
            // Calcular total inicial
            calcularTotal();
            
            // Manejar cambios en el descuento
            $('#descuentoInput').on('input', calcularTotal);
            
            // Validar formulario antes de enviar
            $('#ventaForm').submit(function(e) {
                if ($('.producto-item').length === 0) {
                    e.preventDefault();
                    alert('Debe agregar al menos un producto');
                    return false;
                }
                
                // Validar que no se exceda la cantidad disponible
                let errorCantidad = false;
                $('.producto-item').each(function() {
                    const cantidad = parseInt($(this).find('.cantidad').val());
                    const max = parseInt($(this).find('.cantidad').attr('max')) || 9999;
                    
                    if (cantidad > max) {
                        errorCantidad = true;
                        $(this).find('.cantidad').addClass('is-invalid');
                        $(this).find('.cantidad').next('.text-danger').text(`No hay suficiente stock (máximo: ${max})`);
                    }
                });
                
                if (errorCantidad) {
                    e.preventDefault();
                    alert('Hay productos con cantidades mayores al stock disponible');
                    return false;
                }
                
                // Asegurar que todos los precios tengan formato correcto
                $('.precio').each(function() {
                    const valueStr = $(this).val().replace(/\./g, '').replace(',', '.');
                    const value = parseFloat(valueStr);
                    if (!isNaN(value)) {
                        $(this).val(valueStr);
                    }
                });
                
                return true;
            });
        });
    </script>

    <style>
        .producto-item {
            background-color: #f8f9fa;
        }
        .subtotal {
            font-weight: bold;
            background-color: #e9ecef;
        }
        #totalVenta {
            font-weight: bold;
            color: #0d6efd;
            font-size: 1.2rem;
        }
        .ui-autocomplete {
            max-height: 200px;
            overflow-y: auto;
            overflow-x: hidden;
            padding-right: 20px;
        }
    </style>
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">