@model LavaderoMotos.Models.Venta
@{
    ViewData["Title"] = "Editar Venta";
}

<div class="container mt-4">
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show mx-auto" style="max-width: 800px;" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mx-auto" style="max-width: 800px;" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <h2>Editar Venta</h2>

    @if (Model == null)
    {
        <div class="alert alert-danger">
            No se encontr√≥ la venta solicitada.
        </div>
        <a asp-action="Index" class="btn btn-secondary">Volver al listado</a>
    }
    else
    {
        <form asp-action="Edit" method="post" id="ventaForm">
            @Html.AntiForgeryToken()
            <input type="hidden" asp-for="Id" />

            <div class="row">
                <div class="col-md-4">
                    <div class="mb-3">
                        <label asp-for="Placa" class="form-label"></label>
                        <input asp-for="Placa" class="form-control" id="placaInput" />
                        <span asp-validation-for="Placa" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="mb-3">
                        <label asp-for="Kilometraje" class="form-label"></label>
                        <input asp-for="Kilometraje" class="form-control" />
                        <span asp-validation-for="Kilometraje" class="text-danger"></span>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="mb-3">
                        <label asp-for="Fecha" class="form-label">Fecha de Venta</label>
                        <input asp-for="Fecha" type="datetime-local" class="form-control"
                               value="@Model.Fecha.ToString("yyyy-MM-ddTHH:mm")" />
                        <span asp-validation-for="Fecha" class="text-danger"></span>
                    </div>
                </div>
            </div>

            <hr />
            <h4>Productos</h4>
            <div id="productosContainer">
                @for (int i = 0; i < Model.Productos.Count; i++)
                {
                    <div class="producto-item mb-3 border p-3 rounded">
                        <div class="row">
                            <div class="col-md-4">
                                <label class="form-label">Producto</label>
                                <input asp-for="Productos[i].Producto" class="form-control producto-input" required />
                                <span asp-validation-for="Productos[i].Producto" class="text-danger"></span>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Cantidad</label>
                                <input asp-for="Productos[i].Cantidad" type="number" min="1" 
                                       class="form-control cantidad-input" required />
                                <span asp-validation-for="Productos[i].Cantidad" class="text-danger"></span>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Precio Unitario</label>
                                <input asp-for="Productos[i].Precio" type="number" step="0.01" 
                                       class="form-control precio-input" required />
                                <span asp-validation-for="Productos[i].Precio" class="text-danger"></span>
                            </div>
                            <div class="col-md-2">
                                <label class="form-label">Total</label>
                                <input type="text" class="form-control total-producto" 
                                       value="@((Model.Productos[i].Cantidad * Model.Productos[i].Precio).ToString("N0"))" readonly />
                            </div>
                            <div class="col-md-2 d-flex align-items-end">
                                <button type="button" class="btn btn-danger btn-sm" onclick="eliminarProducto(this)">
                                    <i class="bi bi-trash"></i> Eliminar
                                </button>
                            </div>
                        </div>
                        <input type="hidden" asp-for="Productos[i].Id" />
                        <input type="hidden" asp-for="Productos[i].VentaId" />
                    </div>
                }
            </div>

            <button type="button" class="btn btn-outline-primary mb-3" onclick="agregarProducto()">
                <i class="bi bi-plus-circle"></i> Agregar Producto
            </button>

            <div class="card mt-3">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="mb-3">
                                <label asp-for="Descuento" class="form-label">Descuento (%)</label>
                                <input asp-for="Descuento" type="number" min="0" max="100" step="1" 
                                       class="form-control" id="descuentoInput" />
                                <span asp-validation-for="Descuento" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-8">
                            <div class="text-end">
                                <h5>Subtotal: <span id="subtotalVenta">@Model.Productos.Sum(p => p.Cantidad * p.Precio).ToString("N0")</span></h5>
                                <h5>Descuento: <span id="descuentoAplicado">@Model.Productos.Sum(p => p.Cantidad * p.Precio) </span> (<span id="porcentajeDescuento">@Model.Descuento</span>%)</h5>
                                <h4>Total Venta: <span id="totalVenta">@Model.Productos.Sum(p => p.Cantidad * p.Precio) </span></h4>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="mt-3">
                <button type="submit" class="btn btn-success">
                    <i class="bi bi-save"></i> Actualizar Venta
                </button>
                <a asp-action="Index" class="btn btn-secondary">
                    <i class="bi bi-arrow-left"></i> Cancelar
                </a>
            </div>
        </form>
    }
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        let productoIndex = @Model?.Productos.Count ?? 0;
        const formatoMoneda = new Intl.NumberFormat('es-CO', {
            style: 'decimal',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        });

        function agregarProducto() {
            const container = document.getElementById("productosContainer");
            const divProducto = document.createElement("div");
            divProducto.className = "producto-item mb-3 border p-3 rounded";
            divProducto.innerHTML = `
                <div class="row">
                    <div class="col-md-4">
                        <label class="form-label">Producto</label>
                        <input name="Productos[${productoIndex}].Producto" class="form-control producto-input" required />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Productos[${productoIndex}].Producto" data-valmsg-replace="true"></span>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Cantidad</label>
                        <input name="Productos[${productoIndex}].Cantidad" type="number" min="1" value="1" class="form-control cantidad-input" required />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Productos[${productoIndex}].Cantidad" data-valmsg-replace="true"></span>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Precio Unitario</label>
                        <input name="Productos[${productoIndex}].Precio" type="number" step="0.01" class="form-control precio-input" required />
                        <span class="text-danger field-validation-valid" data-valmsg-for="Productos[${productoIndex}].Precio" data-valmsg-replace="true"></span>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label">Total</label>
                        <input type="text" class="form-control total-producto" readonly />
                    </div>
                    <div class="col-md-2 d-flex align-items-end">
                        <button type="button" class="btn btn-danger btn-sm" onclick="eliminarProducto(this)">
                            <i class="bi bi-trash"></i> Eliminar
                        </button>
                    </div>
                </div>
                <input type="hidden" name="Productos[${productoIndex}].Id" value="0" />
                <input type="hidden" name="Productos[${productoIndex}].VentaId" value="@Model.Id" />
            `;
            container.appendChild(divProducto);

            const precioInput = divProducto.querySelector('.precio-input');
            const cantidadInput = divProducto.querySelector('.cantidad-input');
            const totalInput = divProducto.querySelector('.total-producto');

            const calcularTotalProducto = () => {
                const cantidad = parseFloat(cantidadInput.value) || 0;
                const precio = parseFloat(precioInput.value) || 0;
                totalInput.value = formatoMoneda.format(cantidad * precio);
                actualizarTotalVenta();
            };

            precioInput.addEventListener('input', calcularTotalProducto);
            cantidadInput.addEventListener('input', calcularTotalProducto);

            $.validator.unobtrusive.parse(divProducto);
            productoIndex++;
        }

        function eliminarProducto(button) {
            const productoItem = button.closest('.producto-item');
            productoItem.remove();
            actualizarTotalVenta();
        }

        function actualizarTotalVenta() {
            let subtotal = 0;
            document.querySelectorAll('.producto-item').forEach(item => {
                const cantidad = parseFloat(item.querySelector('.cantidad-input').value) || 0;
                const precio = parseFloat(item.querySelector('.precio-input').value) || 0;
                subtotal += cantidad * precio;
            });

            const descuento = parseFloat(document.getElementById('descuentoInput').value) || 0;
            const descuentoMonetario = subtotal * (descuento / 100);
            const total = subtotal - descuentoMonetario;

            document.getElementById('subtotalVenta').textContent = formatoMoneda.format(subtotal);
            document.getElementById('descuentoAplicado').textContent = formatoMoneda.format(descuentoMonetario);
            document.getElementById('porcentajeDescuento').textContent = descuento;
            document.getElementById('totalVenta').textContent = formatoMoneda.format(total);
        }

        document.addEventListener('DOMContentLoaded', function () {
            document.getElementById('placaInput')?.addEventListener('input', function () {
                this.value = this.value.toUpperCase();
            });

            document.getElementById('descuentoInput').addEventListener('input', actualizarTotalVenta);
            
            // Configurar eventos para productos existentes
            document.querySelectorAll('.producto-item').forEach(item => {
                const precioInput = item.querySelector('.precio-input');
                const cantidadInput = item.querySelector('.cantidad-input');
                
                const calcularTotalProducto = () => {
                    const cantidad = parseFloat(cantidadInput.value) || 0;
                    const precio = parseFloat(precioInput.value) || 0;
                    item.querySelector('.total-producto').value = formatoMoneda.format(cantidad * precio);
                    actualizarTotalVenta();
                };

                precioInput.addEventListener('input', calcularTotalProducto);
                cantidadInput.addEventListener('input', calcularTotalProducto);
            });
        });
    </script>

    <style>
        .producto-item {
            background-color: #f8f9fa;
        }
        .total-producto {
            font-weight: bold;
            background-color: #e9ecef;
        }
        #totalVenta {
            font-weight: bold;
            color: #0d6efd;
            font-size: 1.2rem;
        }
    </style>
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">